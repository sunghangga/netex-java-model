//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.rutebanken.netex.OmitNullsToStringStyle;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.netex.org.uk/netex}TicketingEquipment_VersionStructure"&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
public class TicketingEquipment
    extends TicketingEquipment_VersionStructure
{


    @Override
    public TicketingEquipment withVehicleModes(VehicleModeEnumeration... values) {
        if (values!= null) {
            for (VehicleModeEnumeration value: values) {
                getVehicleModes().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withVehicleModes(Collection<VehicleModeEnumeration> values) {
        if (values!= null) {
            getVehicleModes().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketMachines(Boolean value) {
        setTicketMachines(value);
        return this;
    }

    @Override
    public TicketingEquipment withNumberOfMachines(BigInteger value) {
        setNumberOfMachines(value);
        return this;
    }

    @Override
    public TicketingEquipment withHeightOfMachineInterface(BigDecimal value) {
        setHeightOfMachineInterface(value);
        return this;
    }

    @Override
    public TicketingEquipment withTicketingFacilityList(TicketingFacilityEnumeration... values) {
        if (values!= null) {
            for (TicketingFacilityEnumeration value: values) {
                getTicketingFacilityList().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketingFacilityList(Collection<TicketingFacilityEnumeration> values) {
        if (values!= null) {
            getTicketingFacilityList().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketingServiceFacilityList(TicketingServiceFacilityEnumeration... values) {
        if (values!= null) {
            for (TicketingServiceFacilityEnumeration value: values) {
                getTicketingServiceFacilityList().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketingServiceFacilityList(Collection<TicketingServiceFacilityEnumeration> values) {
        if (values!= null) {
            getTicketingServiceFacilityList().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketOffice(Boolean value) {
        setTicketOffice(value);
        return this;
    }

    @Override
    public TicketingEquipment withTicketCounter(Boolean value) {
        setTicketCounter(value);
        return this;
    }

    @Override
    public TicketingEquipment withNumberOfTills(BigInteger value) {
        setNumberOfTills(value);
        return this;
    }

    @Override
    public TicketingEquipment withQueueManagement(QueueManagementEnumeration value) {
        setQueueManagement(value);
        return this;
    }

    @Override
    public TicketingEquipment withPaymentMethods(PaymentMethodEnumeration... values) {
        if (values!= null) {
            for (PaymentMethodEnumeration value: values) {
                getPaymentMethods().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withPaymentMethods(Collection<PaymentMethodEnumeration> values) {
        if (values!= null) {
            getPaymentMethods().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketTypesAvailable(TicketTypeEnumeration... values) {
        if (values!= null) {
            for (TicketTypeEnumeration value: values) {
                getTicketTypesAvailable().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withTicketTypesAvailable(Collection<TicketTypeEnumeration> values) {
        if (values!= null) {
            getTicketTypesAvailable().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withScopeOfTicketsAvailable(TicketingFacilityEnumeration... values) {
        if (values!= null) {
            for (TicketingFacilityEnumeration value: values) {
                getScopeOfTicketsAvailable().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withScopeOfTicketsAvailable(Collection<TicketingFacilityEnumeration> values) {
        if (values!= null) {
            getScopeOfTicketsAvailable().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withLowCounterAccess(Boolean value) {
        setLowCounterAccess(value);
        return this;
    }

    @Override
    public TicketingEquipment withHeightOfLowCounter(BigDecimal value) {
        setHeightOfLowCounter(value);
        return this;
    }

    @Override
    public TicketingEquipment withInductionLoops(Boolean value) {
        setInductionLoops(value);
        return this;
    }

    @Override
    public TicketingEquipment withTactileInterfaceAvailable(Boolean value) {
        setTactileInterfaceAvailable(value);
        return this;
    }

    @Override
    public TicketingEquipment withAudioInterfaceAvailable(Boolean value) {
        setAudioInterfaceAvailable(value);
        return this;
    }

    @Override
    public TicketingEquipment withDisabledPriority(Boolean value) {
        setDisabledPriority(value);
        return this;
    }

    @Override
    public TicketingEquipment withWheelchairSuitable(Boolean value) {
        setWheelchairSuitable(value);
        return this;
    }

    @Override
    public TicketingEquipment withName(MultilingualString value) {
        setName(value);
        return this;
    }

    @Override
    public TicketingEquipment withPrivateCode(PrivateCodeStructure value) {
        setPrivateCode(value);
        return this;
    }

    @Override
    public TicketingEquipment withPublicCode(PrivateCodeStructure value) {
        setPublicCode(value);
        return this;
    }

    @Override
    public TicketingEquipment withImage(String value) {
        setImage(value);
        return this;
    }

    @Override
    public TicketingEquipment withTypeOfEquipmentRef(TypeOfEquipmentRefStructure value) {
        setTypeOfEquipmentRef(value);
        return this;
    }

    @Override
    public TicketingEquipment withDescription(MultilingualString value) {
        setDescription(value);
        return this;
    }

    @Override
    public TicketingEquipment withNote(MultilingualString value) {
        setNote(value);
        return this;
    }

    @Override
    public TicketingEquipment withInfoLinks(InfoLinks_RelStructure value) {
        setInfoLinks(value);
        return this;
    }

    @Override
    public TicketingEquipment withOutOfService(Boolean value) {
        setOutOfService(value);
        return this;
    }

    @Override
    public TicketingEquipment withKeyList(KeyListStructure value) {
        setKeyList(value);
        return this;
    }

    @Override
    public TicketingEquipment withExtensions(ExtensionsStructure value) {
        setExtensions(value);
        return this;
    }

    @Override
    public TicketingEquipment withBrandingRef(BrandingRefStructure value) {
        setBrandingRef(value);
        return this;
    }

    @Override
    public TicketingEquipment withResponsibilitySetRef(String value) {
        setResponsibilitySetRef(value);
        return this;
    }

    @Override
    public TicketingEquipment withValidityConditions(ValidityConditions_RelStructure value) {
        setValidityConditions(value);
        return this;
    }

    @Override
    public TicketingEquipment withValidBetween(ValidBetween... values) {
        if (values!= null) {
            for (ValidBetween value: values) {
                getValidBetween().add(value);
            }
        }
        return this;
    }

    @Override
    public TicketingEquipment withValidBetween(Collection<ValidBetween> values) {
        if (values!= null) {
            getValidBetween().addAll(values);
        }
        return this;
    }

    @Override
    public TicketingEquipment withAlternativeTexts(AlternativeTexts_RelStructure value) {
        setAlternativeTexts(value);
        return this;
    }

    @Override
    public TicketingEquipment withDataSourceRef(String value) {
        setDataSourceRef(value);
        return this;
    }

    @Override
    public TicketingEquipment withCreated(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public TicketingEquipment withChanged(LocalDateTime value) {
        setChanged(value);
        return this;
    }

    @Override
    public TicketingEquipment withModification(ModificationEnumeration value) {
        setModification(value);
        return this;
    }

    @Override
    public TicketingEquipment withVersion(String value) {
        setVersion(value);
        return this;
    }

    @Override
    public TicketingEquipment withStatus_BasicModificationDetailsGroup(StatusEnumeration value) {
        setStatus_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public TicketingEquipment withDerivedFromVersionRef_BasicModificationDetailsGroup(String value) {
        setDerivedFromVersionRef_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public TicketingEquipment withCompatibleWithVersionFrameVersionRef(String value) {
        setCompatibleWithVersionFrameVersionRef(value);
        return this;
    }

    @Override
    public TicketingEquipment withDerivedFromObjectRef(String value) {
        setDerivedFromObjectRef(value);
        return this;
    }

    @Override
    public TicketingEquipment withNameOfClass(String value) {
        setNameOfClass(value);
        return this;
    }

    @Override
    public TicketingEquipment withId(String value) {
        setId(value);
        return this;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, OmitNullsToStringStyle.INSTANCE);
    }

}
