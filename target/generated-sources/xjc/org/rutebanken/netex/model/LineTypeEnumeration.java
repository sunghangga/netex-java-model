//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LineTypeEnumeration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LineTypeEnumeration"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="local"/&gt;
 *     &lt;enumeration value="urban"/&gt;
 *     &lt;enumeration value="longDistance"/&gt;
 *     &lt;enumeration value="express"/&gt;
 *     &lt;enumeration value="seasonal"/&gt;
 *     &lt;enumeration value="replacement"/&gt;
 *     &lt;enumeration value="flexible"/&gt;
 *     &lt;enumeration value="other"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "LineTypeEnumeration")
@XmlEnum
public enum LineTypeEnumeration {

    @XmlEnumValue("local")
    LOCAL("local"),
    @XmlEnumValue("urban")
    URBAN("urban"),
    @XmlEnumValue("longDistance")
    LONG_DISTANCE("longDistance"),
    @XmlEnumValue("express")
    EXPRESS("express"),
    @XmlEnumValue("seasonal")
    SEASONAL("seasonal"),
    @XmlEnumValue("replacement")
    REPLACEMENT("replacement"),
    @XmlEnumValue("flexible")
    FLEXIBLE("flexible"),
    @XmlEnumValue("other")
    OTHER("other");
    private final String value;

    LineTypeEnumeration(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LineTypeEnumeration fromValue(String v) {
        for (LineTypeEnumeration c: LineTypeEnumeration.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
