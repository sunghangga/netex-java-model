//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for StepLimitUnitEnumeration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="StepLimitUnitEnumeration"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}normalizedString"&gt;
 *     &lt;enumeration value="stops"/&gt;
 *     &lt;enumeration value="stopsIncludingPassThroughStops"/&gt;
 *     &lt;enumeration value="sections"/&gt;
 *     &lt;enumeration value="zones"/&gt;
 *     &lt;enumeration value="networks"/&gt;
 *     &lt;enumeration value="operators"/&gt;
 *     &lt;enumeration value="countries"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "StepLimitUnitEnumeration")
@XmlEnum
public enum StepLimitUnitEnumeration {

    @XmlEnumValue("stops")
    STOPS("stops"),
    @XmlEnumValue("stopsIncludingPassThroughStops")
    STOPS_INCLUDING_PASS_THROUGH_STOPS("stopsIncludingPassThroughStops"),
    @XmlEnumValue("sections")
    SECTIONS("sections"),
    @XmlEnumValue("zones")
    ZONES("zones"),
    @XmlEnumValue("networks")
    NETWORKS("networks"),
    @XmlEnumValue("operators")
    OPERATORS("operators"),
    @XmlEnumValue("countries")
    COUNTRIES("countries");
    private final String value;

    StepLimitUnitEnumeration(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StepLimitUnitEnumeration fromValue(String v) {
        for (StepLimitUnitEnumeration c: StepLimitUnitEnumeration.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
