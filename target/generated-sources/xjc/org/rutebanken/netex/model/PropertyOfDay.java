//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.rutebanken.netex.OmitNullsToStringStyle;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.netex.org.uk/netex}PropertyOfDayStructure"&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "PropertyOfDay")
public class PropertyOfDay
    extends PropertyOfDayStructure
{


    @Override
    public PropertyOfDay withName(MultilingualString value) {
        setName(value);
        return this;
    }

    @Override
    public PropertyOfDay withDescription(MultilingualString value) {
        setDescription(value);
        return this;
    }

    @Override
    public PropertyOfDay withDaysOfWeek(DayOfWeekEnumeration... values) {
        if (values!= null) {
            for (DayOfWeekEnumeration value: values) {
                getDaysOfWeek().add(value);
            }
        }
        return this;
    }

    @Override
    public PropertyOfDay withDaysOfWeek(Collection<DayOfWeekEnumeration> values) {
        if (values!= null) {
            getDaysOfWeek().addAll(values);
        }
        return this;
    }

    @Override
    public PropertyOfDay withWeeksOfMonth(String... values) {
        if (values!= null) {
            for (String value: values) {
                getWeeksOfMonth().add(value);
            }
        }
        return this;
    }

    @Override
    public PropertyOfDay withWeeksOfMonth(Collection<String> values) {
        if (values!= null) {
            getWeeksOfMonth().addAll(values);
        }
        return this;
    }

    @Override
    public PropertyOfDay withMonthOfYear(XMLGregorianCalendar value) {
        setMonthOfYear(value);
        return this;
    }

    @Override
    public PropertyOfDay withDayOfMonth(XMLGregorianCalendar value) {
        setDayOfMonth(value);
        return this;
    }

    @Override
    public PropertyOfDay withDayOfYear(XMLGregorianCalendar value) {
        setDayOfYear(value);
        return this;
    }

    @Override
    public PropertyOfDay withCountryRef(CountryRefStructure value) {
        setCountryRef(value);
        return this;
    }

    @Override
    public PropertyOfDay withHolidayTypes(HolidayTypeEnumeration... values) {
        if (values!= null) {
            for (HolidayTypeEnumeration value: values) {
                getHolidayTypes().add(value);
            }
        }
        return this;
    }

    @Override
    public PropertyOfDay withHolidayTypes(Collection<HolidayTypeEnumeration> values) {
        if (values!= null) {
            getHolidayTypes().addAll(values);
        }
        return this;
    }

    @Override
    public PropertyOfDay withSeasons(SeasonEnumeration... values) {
        if (values!= null) {
            for (SeasonEnumeration value: values) {
                getSeasons().add(value);
            }
        }
        return this;
    }

    @Override
    public PropertyOfDay withSeasons(Collection<SeasonEnumeration> values) {
        if (values!= null) {
            getSeasons().addAll(values);
        }
        return this;
    }

    @Override
    public PropertyOfDay withTides(TideEnumeration... values) {
        if (values!= null) {
            for (TideEnumeration value: values) {
                getTides().add(value);
            }
        }
        return this;
    }

    @Override
    public PropertyOfDay withTides(Collection<TideEnumeration> values) {
        if (values!= null) {
            getTides().addAll(values);
        }
        return this;
    }

    @Override
    public PropertyOfDay withDayEvent(DayEventEnumeration value) {
        setDayEvent(value);
        return this;
    }

    @Override
    public PropertyOfDay withCrowding(CrowdingEnumeration value) {
        setCrowding(value);
        return this;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, OmitNullsToStringStyle.INSTANCE);
    }

}
