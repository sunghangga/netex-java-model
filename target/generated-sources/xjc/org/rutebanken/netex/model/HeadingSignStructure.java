//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.rutebanken.netex.OmitNullsToStringStyle;


/**
 * <p>Java class for HeadingSignStructure complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="HeadingSignStructure"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.netex.org.uk/netex}SignEquipment_VersionStructure"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PlaceName" type="{http://www.netex.org.uk/netex}MultilingualString"/&gt;
 *         &lt;group ref="{http://www.netex.org.uk/netex}HeadingSignGroup"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HeadingSignStructure", propOrder = {
    "placeName",
    "lineRef",
    "lineName",
    "transportMode",
    "transportSubmode",
    "lineMap",
    "directionRef",
    "directionName",
    "destinationDisplayRef",
    "linePublicCode"
})
@XmlSeeAlso({
    HeadingSign.class
})
public class HeadingSignStructure
    extends SignEquipment_VersionStructure
{

    @XmlElement(name = "PlaceName", required = true)
    protected MultilingualString placeName;
    @XmlElementRef(name = "LineRef", namespace = "http://www.netex.org.uk/netex", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends LineRefStructure> lineRef;
    @XmlElement(name = "LineName")
    protected MultilingualString lineName;
    @XmlElement(name = "TransportMode")
    @XmlSchemaType(name = "NMTOKEN")
    protected VehicleModeEnumeration transportMode;
    @XmlElement(name = "TransportSubmode")
    protected TransportSubmodeStructure transportSubmode;
    @XmlElement(name = "LineMap")
    @XmlSchemaType(name = "anyURI")
    protected String lineMap;
    @XmlElement(name = "DirectionRef")
    protected DirectionRefStructure directionRef;
    @XmlElement(name = "DirectionName")
    protected MultilingualString directionName;
    @XmlElement(name = "DestinationDisplayRef")
    protected DestinationDisplayRefStructure destinationDisplayRef;
    @XmlElement(name = "LinePublicCode")
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    @XmlSchemaType(name = "normalizedString")
    protected String linePublicCode;

    /**
     * Gets the value of the placeName property.
     * 
     * @return
     *     possible object is
     *     {@link MultilingualString }
     *     
     */
    public MultilingualString getPlaceName() {
        return placeName;
    }

    /**
     * Sets the value of the placeName property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultilingualString }
     *     
     */
    public void setPlaceName(MultilingualString value) {
        this.placeName = value;
    }

    /**
     * Gets the value of the lineRef property.
     * 
     * @return
     *     possible object is
     *     {@link JAXBElement }{@code <}{@link FlexibleLineRefStructure }{@code >}
     *     {@link JAXBElement }{@code <}{@link LineRefStructure }{@code >}
     *     
     */
    public JAXBElement<? extends LineRefStructure> getLineRef() {
        return lineRef;
    }

    /**
     * Sets the value of the lineRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link JAXBElement }{@code <}{@link FlexibleLineRefStructure }{@code >}
     *     {@link JAXBElement }{@code <}{@link LineRefStructure }{@code >}
     *     
     */
    public void setLineRef(JAXBElement<? extends LineRefStructure> value) {
        this.lineRef = value;
    }

    /**
     * Gets the value of the lineName property.
     * 
     * @return
     *     possible object is
     *     {@link MultilingualString }
     *     
     */
    public MultilingualString getLineName() {
        return lineName;
    }

    /**
     * Sets the value of the lineName property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultilingualString }
     *     
     */
    public void setLineName(MultilingualString value) {
        this.lineName = value;
    }

    /**
     * Gets the value of the transportMode property.
     * 
     * @return
     *     possible object is
     *     {@link VehicleModeEnumeration }
     *     
     */
    public VehicleModeEnumeration getTransportMode() {
        return transportMode;
    }

    /**
     * Sets the value of the transportMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link VehicleModeEnumeration }
     *     
     */
    public void setTransportMode(VehicleModeEnumeration value) {
        this.transportMode = value;
    }

    /**
     * Gets the value of the transportSubmode property.
     * 
     * @return
     *     possible object is
     *     {@link TransportSubmodeStructure }
     *     
     */
    public TransportSubmodeStructure getTransportSubmode() {
        return transportSubmode;
    }

    /**
     * Sets the value of the transportSubmode property.
     * 
     * @param value
     *     allowed object is
     *     {@link TransportSubmodeStructure }
     *     
     */
    public void setTransportSubmode(TransportSubmodeStructure value) {
        this.transportSubmode = value;
    }

    /**
     * Gets the value of the lineMap property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLineMap() {
        return lineMap;
    }

    /**
     * Sets the value of the lineMap property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLineMap(String value) {
        this.lineMap = value;
    }

    /**
     * Gets the value of the directionRef property.
     * 
     * @return
     *     possible object is
     *     {@link DirectionRefStructure }
     *     
     */
    public DirectionRefStructure getDirectionRef() {
        return directionRef;
    }

    /**
     * Sets the value of the directionRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link DirectionRefStructure }
     *     
     */
    public void setDirectionRef(DirectionRefStructure value) {
        this.directionRef = value;
    }

    /**
     * Gets the value of the directionName property.
     * 
     * @return
     *     possible object is
     *     {@link MultilingualString }
     *     
     */
    public MultilingualString getDirectionName() {
        return directionName;
    }

    /**
     * Sets the value of the directionName property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultilingualString }
     *     
     */
    public void setDirectionName(MultilingualString value) {
        this.directionName = value;
    }

    /**
     * Gets the value of the destinationDisplayRef property.
     * 
     * @return
     *     possible object is
     *     {@link DestinationDisplayRefStructure }
     *     
     */
    public DestinationDisplayRefStructure getDestinationDisplayRef() {
        return destinationDisplayRef;
    }

    /**
     * Sets the value of the destinationDisplayRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link DestinationDisplayRefStructure }
     *     
     */
    public void setDestinationDisplayRef(DestinationDisplayRefStructure value) {
        this.destinationDisplayRef = value;
    }

    /**
     * Gets the value of the linePublicCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLinePublicCode() {
        return linePublicCode;
    }

    /**
     * Sets the value of the linePublicCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLinePublicCode(String value) {
        this.linePublicCode = value;
    }

    public HeadingSignStructure withPlaceName(MultilingualString value) {
        setPlaceName(value);
        return this;
    }

    public HeadingSignStructure withLineRef(JAXBElement<? extends LineRefStructure> value) {
        setLineRef(value);
        return this;
    }

    public HeadingSignStructure withLineName(MultilingualString value) {
        setLineName(value);
        return this;
    }

    public HeadingSignStructure withTransportMode(VehicleModeEnumeration value) {
        setTransportMode(value);
        return this;
    }

    public HeadingSignStructure withTransportSubmode(TransportSubmodeStructure value) {
        setTransportSubmode(value);
        return this;
    }

    public HeadingSignStructure withLineMap(String value) {
        setLineMap(value);
        return this;
    }

    public HeadingSignStructure withDirectionRef(DirectionRefStructure value) {
        setDirectionRef(value);
        return this;
    }

    public HeadingSignStructure withDirectionName(MultilingualString value) {
        setDirectionName(value);
        return this;
    }

    public HeadingSignStructure withDestinationDisplayRef(DestinationDisplayRefStructure value) {
        setDestinationDisplayRef(value);
        return this;
    }

    public HeadingSignStructure withLinePublicCode(String value) {
        setLinePublicCode(value);
        return this;
    }

    @Override
    public HeadingSignStructure withHeight(BigDecimal value) {
        setHeight(value);
        return this;
    }

    @Override
    public HeadingSignStructure withWidth(BigDecimal value) {
        setWidth(value);
        return this;
    }

    @Override
    public HeadingSignStructure withHeightFromFloor(BigDecimal value) {
        setHeightFromFloor(value);
        return this;
    }

    @Override
    public HeadingSignStructure withPlacement(MultilingualString value) {
        setPlacement(value);
        return this;
    }

    @Override
    public HeadingSignStructure withBrandGraphic(String value) {
        setBrandGraphic(value);
        return this;
    }

    @Override
    public HeadingSignStructure withSignGraphic(String value) {
        setSignGraphic(value);
        return this;
    }

    @Override
    public HeadingSignStructure withMachineReadable(Boolean value) {
        setMachineReadable(value);
        return this;
    }

    @Override
    public HeadingSignStructure withAsBraille(Boolean value) {
        setAsBraille(value);
        return this;
    }

    @Override
    public HeadingSignStructure withAudioTriggerMethod(AudioTriggerMethodEnumeration value) {
        setAudioTriggerMethod(value);
        return this;
    }

    @Override
    public HeadingSignStructure withPrintedPresentation(PrintPresentationStructure value) {
        setPrintedPresentation(value);
        return this;
    }

    @Override
    public HeadingSignStructure withContrast(BigDecimal value) {
        setContrast(value);
        return this;
    }

    @Override
    public HeadingSignStructure withName(MultilingualString value) {
        setName(value);
        return this;
    }

    @Override
    public HeadingSignStructure withPrivateCode(PrivateCodeStructure value) {
        setPrivateCode(value);
        return this;
    }

    @Override
    public HeadingSignStructure withPublicCode(PrivateCodeStructure value) {
        setPublicCode(value);
        return this;
    }

    @Override
    public HeadingSignStructure withImage(String value) {
        setImage(value);
        return this;
    }

    @Override
    public HeadingSignStructure withTypeOfEquipmentRef(TypeOfEquipmentRefStructure value) {
        setTypeOfEquipmentRef(value);
        return this;
    }

    @Override
    public HeadingSignStructure withDescription(MultilingualString value) {
        setDescription(value);
        return this;
    }

    @Override
    public HeadingSignStructure withNote(MultilingualString value) {
        setNote(value);
        return this;
    }

    @Override
    public HeadingSignStructure withInfoLinks(InfoLinks_RelStructure value) {
        setInfoLinks(value);
        return this;
    }

    @Override
    public HeadingSignStructure withOutOfService(Boolean value) {
        setOutOfService(value);
        return this;
    }

    @Override
    public HeadingSignStructure withKeyList(KeyListStructure value) {
        setKeyList(value);
        return this;
    }

    @Override
    public HeadingSignStructure withExtensions(ExtensionsStructure value) {
        setExtensions(value);
        return this;
    }

    @Override
    public HeadingSignStructure withBrandingRef(BrandingRefStructure value) {
        setBrandingRef(value);
        return this;
    }

    @Override
    public HeadingSignStructure withResponsibilitySetRef(String value) {
        setResponsibilitySetRef(value);
        return this;
    }

    @Override
    public HeadingSignStructure withValidityConditions(ValidityConditions_RelStructure value) {
        setValidityConditions(value);
        return this;
    }

    @Override
    public HeadingSignStructure withValidBetween(ValidBetween... values) {
        if (values!= null) {
            for (ValidBetween value: values) {
                getValidBetween().add(value);
            }
        }
        return this;
    }

    @Override
    public HeadingSignStructure withValidBetween(Collection<ValidBetween> values) {
        if (values!= null) {
            getValidBetween().addAll(values);
        }
        return this;
    }

    @Override
    public HeadingSignStructure withAlternativeTexts(AlternativeTexts_RelStructure value) {
        setAlternativeTexts(value);
        return this;
    }

    @Override
    public HeadingSignStructure withDataSourceRef(String value) {
        setDataSourceRef(value);
        return this;
    }

    @Override
    public HeadingSignStructure withCreated(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public HeadingSignStructure withChanged(LocalDateTime value) {
        setChanged(value);
        return this;
    }

    @Override
    public HeadingSignStructure withModification(ModificationEnumeration value) {
        setModification(value);
        return this;
    }

    @Override
    public HeadingSignStructure withVersion(String value) {
        setVersion(value);
        return this;
    }

    @Override
    public HeadingSignStructure withStatus_BasicModificationDetailsGroup(StatusEnumeration value) {
        setStatus_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public HeadingSignStructure withDerivedFromVersionRef_BasicModificationDetailsGroup(String value) {
        setDerivedFromVersionRef_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public HeadingSignStructure withCompatibleWithVersionFrameVersionRef(String value) {
        setCompatibleWithVersionFrameVersionRef(value);
        return this;
    }

    @Override
    public HeadingSignStructure withDerivedFromObjectRef(String value) {
        setDerivedFromObjectRef(value);
        return this;
    }

    @Override
    public HeadingSignStructure withNameOfClass(String value) {
        setNameOfClass(value);
        return this;
    }

    @Override
    public HeadingSignStructure withId(String value) {
        setId(value);
        return this;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, OmitNullsToStringStyle.INSTANCE);
    }

}
