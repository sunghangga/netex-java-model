//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Collection;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.rutebanken.netex.OmitNullsToStringStyle;


/**
 * <p>Java class for Exchanging_VersionStructure complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Exchanging_VersionStructure"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.netex.org.uk/netex}Reselling_VersionStructure"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://www.netex.org.uk/netex}ExchangingGroup"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Exchanging_VersionStructure", propOrder = {
    "numberOfExchangesAllowed",
    "toFareClass",
    "toClassOfUseRef",
    "exchangableTo"
})
@XmlSeeAlso({
    Exchanging.class
})
public class Exchanging_VersionStructure
    extends Reselling_VersionStructure
{

    @XmlElement(name = "NumberOfExchangesAllowed")
    protected BigInteger numberOfExchangesAllowed;
    @XmlElement(name = "ToFareClass", defaultValue = "any")
    @XmlSchemaType(name = "NMTOKEN")
    protected FareClassEnumeration toFareClass;
    @XmlElement(name = "ToClassOfUseRef")
    protected ClassOfUseRefStructure toClassOfUseRef;
    @XmlElement(name = "ExchangableTo", defaultValue = "anyProduct")
    @XmlSchemaType(name = "normalizedString")
    protected ExchangableToEnumeration exchangableTo;

    /**
     * Gets the value of the numberOfExchangesAllowed property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getNumberOfExchangesAllowed() {
        return numberOfExchangesAllowed;
    }

    /**
     * Sets the value of the numberOfExchangesAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setNumberOfExchangesAllowed(BigInteger value) {
        this.numberOfExchangesAllowed = value;
    }

    /**
     * Gets the value of the toFareClass property.
     * 
     * @return
     *     possible object is
     *     {@link FareClassEnumeration }
     *     
     */
    public FareClassEnumeration getToFareClass() {
        return toFareClass;
    }

    /**
     * Sets the value of the toFareClass property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareClassEnumeration }
     *     
     */
    public void setToFareClass(FareClassEnumeration value) {
        this.toFareClass = value;
    }

    /**
     * Gets the value of the toClassOfUseRef property.
     * 
     * @return
     *     possible object is
     *     {@link ClassOfUseRefStructure }
     *     
     */
    public ClassOfUseRefStructure getToClassOfUseRef() {
        return toClassOfUseRef;
    }

    /**
     * Sets the value of the toClassOfUseRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link ClassOfUseRefStructure }
     *     
     */
    public void setToClassOfUseRef(ClassOfUseRefStructure value) {
        this.toClassOfUseRef = value;
    }

    /**
     * Gets the value of the exchangableTo property.
     * 
     * @return
     *     possible object is
     *     {@link ExchangableToEnumeration }
     *     
     */
    public ExchangableToEnumeration getExchangableTo() {
        return exchangableTo;
    }

    /**
     * Sets the value of the exchangableTo property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExchangableToEnumeration }
     *     
     */
    public void setExchangableTo(ExchangableToEnumeration value) {
        this.exchangableTo = value;
    }

    public Exchanging_VersionStructure withNumberOfExchangesAllowed(BigInteger value) {
        setNumberOfExchangesAllowed(value);
        return this;
    }

    public Exchanging_VersionStructure withToFareClass(FareClassEnumeration value) {
        setToFareClass(value);
        return this;
    }

    public Exchanging_VersionStructure withToClassOfUseRef(ClassOfUseRefStructure value) {
        setToClassOfUseRef(value);
        return this;
    }

    public Exchanging_VersionStructure withExchangableTo(ExchangableToEnumeration value) {
        setExchangableTo(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withAllowed(ResellTypeEnumeration value) {
        setAllowed(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withCanChangeClass(Boolean value) {
        setCanChangeClass(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withUnusedTicketsOnly(Boolean value) {
        setUnusedTicketsOnly(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withOnlyAtCertainDistributionPoints(Boolean value) {
        setOnlyAtCertainDistributionPoints(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withResellWhen(ResellWhenEnumeration value) {
        setResellWhen(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableFromAnyTime(String value) {
        setExchangableFromAnyTime(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableFromDuration(Duration value) {
        setExchangableFromDuration(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableFromPercentUse(BigDecimal value) {
        setExchangableFromPercentUse(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableFromIntervalRef(TimeIntervalRefStructure value) {
        setExchangableFromIntervalRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableUntilAnyTime(String value) {
        setExchangableUntilAnyTime(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableUntilDuration(Duration value) {
        setExchangableUntilDuration(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableUntilPercentUse(BigDecimal value) {
        setExchangableUntilPercentUse(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExchangableUntilIntervalRef(TimeIntervalRefStructure value) {
        setExchangableUntilIntervalRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withEffectiveFrom(EffectiveFromEnumeration value) {
        setEffectiveFrom(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withNotificationPeriod(Duration value) {
        setNotificationPeriod(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withHasFee(Boolean value) {
        setHasFee(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withRefundBasis(PerBasisEnumeration value) {
        setRefundBasis(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withPaymentMethods(PaymentMethodEnumeration... values) {
        if (values!= null) {
            for (PaymentMethodEnumeration value: values) {
                getPaymentMethods().add(value);
            }
        }
        return this;
    }

    @Override
    public Exchanging_VersionStructure withPaymentMethods(Collection<PaymentMethodEnumeration> values) {
        if (values!= null) {
            getPaymentMethods().addAll(values);
        }
        return this;
    }

    @Override
    public Exchanging_VersionStructure withTypesOfPaymentMethodRef(TypeOfPaymentMethodRefs_RelStructure value) {
        setTypesOfPaymentMethodRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withTypeOfUsageParameterRef(TypeOfUsageParameterRefStructure value) {
        setTypeOfUsageParameterRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withPrices(UsageParameterPrices_RelStructure value) {
        setPrices(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withName(MultilingualString value) {
        setName(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withDescription(MultilingualString value) {
        setDescription(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withUrl(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withInfoLinks(org.rutebanken.netex.model.PriceableObject_VersionStructure.InfoLinks value) {
        setInfoLinks(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withAlternativeNames(AlternativeNames_RelStructure value) {
        setAlternativeNames(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withNoticeAssignments(NoticeAssignments_RelStructure value) {
        setNoticeAssignments(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withPricingServiceRef(PricingServiceRefStructure value) {
        setPricingServiceRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withPricingRuleRef(JAXBElement<? extends PricingRuleRefStructure> value) {
        setPricingRuleRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withPriceGroups(PriceGroups_RelStructure value) {
        setPriceGroups(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withFareTables(FareTables_RelStructure value) {
        setFareTables(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withKeyList(KeyListStructure value) {
        setKeyList(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withExtensions(ExtensionsStructure value) {
        setExtensions(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withBrandingRef(BrandingRefStructure value) {
        setBrandingRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withResponsibilitySetRef(String value) {
        setResponsibilitySetRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withValidityConditions(ValidityConditions_RelStructure value) {
        setValidityConditions(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withValidBetween(ValidBetween... values) {
        if (values!= null) {
            for (ValidBetween value: values) {
                getValidBetween().add(value);
            }
        }
        return this;
    }

    @Override
    public Exchanging_VersionStructure withValidBetween(Collection<ValidBetween> values) {
        if (values!= null) {
            getValidBetween().addAll(values);
        }
        return this;
    }

    @Override
    public Exchanging_VersionStructure withAlternativeTexts(AlternativeTexts_RelStructure value) {
        setAlternativeTexts(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withDataSourceRef(String value) {
        setDataSourceRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withCreated(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withChanged(LocalDateTime value) {
        setChanged(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withModification(ModificationEnumeration value) {
        setModification(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withVersion(String value) {
        setVersion(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withStatus_BasicModificationDetailsGroup(StatusEnumeration value) {
        setStatus_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withDerivedFromVersionRef_BasicModificationDetailsGroup(String value) {
        setDerivedFromVersionRef_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withCompatibleWithVersionFrameVersionRef(String value) {
        setCompatibleWithVersionFrameVersionRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withDerivedFromObjectRef(String value) {
        setDerivedFromObjectRef(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withNameOfClass(String value) {
        setNameOfClass(value);
        return this;
    }

    @Override
    public Exchanging_VersionStructure withId(String value) {
        setId(value);
        return this;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, OmitNullsToStringStyle.INSTANCE);
    }

}
