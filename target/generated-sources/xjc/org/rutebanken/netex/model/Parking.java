//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.27 at 06:54:48 PM WITA 
//


package org.rutebanken.netex.model;

import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Collection;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml._3.PolygonType;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.rutebanken.netex.OmitNullsToStringStyle;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.netex.org.uk/netex}Parking_VersionStructure"&gt;
 *       &lt;sequence&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}EntityInVersionGroup" minOccurs="0"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}DataManagedObjectGroup"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}GroupOfEntitiesGroup"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}GroupOfPointsGroup"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}ZoneGroup"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;group ref="{http://www.netex.org.uk/netex}PlaceGroup"/&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}AddressablePlaceGroup"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;group ref="{http://www.netex.org.uk/netex}SiteElementGroup"/&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}SiteGroup"/&gt;
 *         &lt;/sequence&gt;
 *         &lt;sequence&gt;
 *           &lt;group ref="{http://www.netex.org.uk/netex}ParkingGroup"/&gt;
 *         &lt;/sequence&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="id" type="{http://www.netex.org.uk/netex}ParkingIdType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
public class Parking
    extends Parking_VersionStructure
{


    @Override
    public Parking withPathLinks(SitePathLinks_RelStructure value) {
        setPathLinks(value);
        return this;
    }

    @Override
    public Parking withPathJunctions(PathJunctions_RelStructure value) {
        setPathJunctions(value);
        return this;
    }

    @Override
    public Parking withAccesses(Accesses_RelStructure value) {
        setAccesses(value);
        return this;
    }

    @Override
    public Parking withNavigationPaths(NavigationPaths_RelStructure value) {
        setNavigationPaths(value);
        return this;
    }

    @Override
    public Parking withPublicCode(String value) {
        setPublicCode(value);
        return this;
    }

    @Override
    public Parking withLabel(MultilingualString value) {
        setLabel(value);
        return this;
    }

    @Override
    public Parking withParkingType(ParkingTypeEnumeration value) {
        setParkingType(value);
        return this;
    }

    @Override
    public Parking withParkingVehicleTypes(ParkingVehicleEnumeration... values) {
        if (values!= null) {
            for (ParkingVehicleEnumeration value: values) {
                getParkingVehicleTypes().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withParkingVehicleTypes(Collection<ParkingVehicleEnumeration> values) {
        if (values!= null) {
            getParkingVehicleTypes().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withParkingLayout(ParkingLayoutEnumeration value) {
        setParkingLayout(value);
        return this;
    }

    @Override
    public Parking withNumberOfParkingLevels(BigInteger value) {
        setNumberOfParkingLevels(value);
        return this;
    }

    @Override
    public Parking withPrincipalCapacity(BigInteger value) {
        setPrincipalCapacity(value);
        return this;
    }

    @Override
    public Parking withTotalCapacity(BigInteger value) {
        setTotalCapacity(value);
        return this;
    }

    @Override
    public Parking withOvernightParkingPermitted(Boolean value) {
        setOvernightParkingPermitted(value);
        return this;
    }

    @Override
    public Parking withProhibitedForHazardousMaterials(Boolean value) {
        setProhibitedForHazardousMaterials(value);
        return this;
    }

    @Override
    public Parking withRechargingAvailable(Boolean value) {
        setRechargingAvailable(value);
        return this;
    }

    @Override
    public Parking withSecure(Boolean value) {
        setSecure(value);
        return this;
    }

    @Override
    public Parking withRealTimeOccupancyAvailable(Boolean value) {
        setRealTimeOccupancyAvailable(value);
        return this;
    }

    @Override
    public Parking withParkingPaymentProcess(ParkingPaymentProcessEnumeration... values) {
        if (values!= null) {
            for (ParkingPaymentProcessEnumeration value: values) {
                getParkingPaymentProcess().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withParkingPaymentProcess(Collection<ParkingPaymentProcessEnumeration> values) {
        if (values!= null) {
            getParkingPaymentProcess().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withPaymentMethods(PaymentMethodEnumeration... values) {
        if (values!= null) {
            for (PaymentMethodEnumeration value: values) {
                getPaymentMethods().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withPaymentMethods(Collection<PaymentMethodEnumeration> values) {
        if (values!= null) {
            getPaymentMethods().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withTypesOfPaymentMethod(TypeOfPaymentMethodRefs_RelStructure value) {
        setTypesOfPaymentMethod(value);
        return this;
    }

    @Override
    public Parking withDefaultCurrency(String value) {
        setDefaultCurrency(value);
        return this;
    }

    @Override
    public Parking withCurrenciesAccepted(String... values) {
        if (values!= null) {
            for (String value: values) {
                getCurrenciesAccepted().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withCurrenciesAccepted(Collection<String> values) {
        if (values!= null) {
            getCurrenciesAccepted().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withCardsAccepted(String... values) {
        if (values!= null) {
            for (String value: values) {
                getCardsAccepted().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withCardsAccepted(Collection<String> values) {
        if (values!= null) {
            getCardsAccepted().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withParkingReservation(ParkingReservationEnumeration value) {
        setParkingReservation(value);
        return this;
    }

    @Override
    public Parking withBookingUrl(String value) {
        setBookingUrl(value);
        return this;
    }

    @Override
    public Parking withPaymentByMobile(PaymentByMobileStructure value) {
        setPaymentByMobile(value);
        return this;
    }

    @Override
    public Parking withFreeParkingOutOfHours(Boolean value) {
        setFreeParkingOutOfHours(value);
        return this;
    }

    @Override
    public Parking withParkingProperties(ParkingProperties_RelStructure value) {
        setParkingProperties(value);
        return this;
    }

    @Override
    public Parking withParkingAreas(ParkingAreas_RelStructure value) {
        setParkingAreas(value);
        return this;
    }

    @Override
    public Parking withVehicleEntrances(ParkingEntrancesForVehicles_RelStructure value) {
        setVehicleEntrances(value);
        return this;
    }

    @Override
    public Parking withTopographicPlaceRef(TopographicPlaceRefStructure value) {
        setTopographicPlaceRef(value);
        return this;
    }

    @Override
    public Parking withTopographicPlaceView(TopographicPlaceView value) {
        setTopographicPlaceView(value);
        return this;
    }

    @Override
    public Parking withAdditionalTopographicPlaces(TopographicPlaceRefs_RelStructure value) {
        setAdditionalTopographicPlaces(value);
        return this;
    }

    @Override
    public Parking withSiteType(SiteTypeEnumeration value) {
        setSiteType(value);
        return this;
    }

    @Override
    public Parking withAtCentre(Boolean value) {
        setAtCentre(value);
        return this;
    }

    @Override
    public Parking withLocale(LocaleStructure value) {
        setLocale(value);
        return this;
    }

    @Override
    public Parking withOrganisationRef(JAXBElement<? extends OrganisationRefStructure> value) {
        setOrganisationRef(value);
        return this;
    }

    @Override
    public Parking withOperatingOrganisationView(Organisation_DerivedViewStructure value) {
        setOperatingOrganisationView(value);
        return this;
    }

    @Override
    public Parking withParentSiteRef(SiteRefStructure value) {
        setParentSiteRef(value);
        return this;
    }

    @Override
    public Parking withAdjacentSites(SiteRefs_RelStructure value) {
        setAdjacentSites(value);
        return this;
    }

    @Override
    public Parking withContainedInPlaceRef(TopographicPlaceRefStructure value) {
        setContainedInPlaceRef(value);
        return this;
    }

    @Override
    public Parking withLevels(Levels_RelStructure value) {
        setLevels(value);
        return this;
    }

    @Override
    public Parking withEntrances(SiteEntrances_RelStructure value) {
        setEntrances(value);
        return this;
    }

    @Override
    public Parking withEquipmentPlaces(EquipmentPlaces_RelStructure value) {
        setEquipmentPlaces(value);
        return this;
    }

    @Override
    public Parking withPlaceEquipments(PlaceEquipments_RelStructure value) {
        setPlaceEquipments(value);
        return this;
    }

    @Override
    public Parking withLocalServices(LocalServices_RelStructure value) {
        setLocalServices(value);
        return this;
    }

    @Override
    public Parking withAccessibilityAssessment(AccessibilityAssessment value) {
        setAccessibilityAssessment(value);
        return this;
    }

    @Override
    public Parking withAccessModes(AccessModeEnumeration... values) {
        if (values!= null) {
            for (AccessModeEnumeration value: values) {
                getAccessModes().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withAccessModes(Collection<AccessModeEnumeration> values) {
        if (values!= null) {
            getAccessModes().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withNameSuffix(MultilingualString value) {
        setNameSuffix(value);
        return this;
    }

    @Override
    public Parking withAlternativeNames(AlternativeNames_RelStructure value) {
        setAlternativeNames(value);
        return this;
    }

    @Override
    public Parking withCrossRoad(MultilingualString value) {
        setCrossRoad(value);
        return this;
    }

    @Override
    public Parking withLandmark(MultilingualString value) {
        setLandmark(value);
        return this;
    }

    @Override
    public Parking withPublicUse(PublicUseEnumeration value) {
        setPublicUse(value);
        return this;
    }

    @Override
    public Parking withCovered(CoveredEnumeration value) {
        setCovered(value);
        return this;
    }

    @Override
    public Parking withGated(GatedEnumeration value) {
        setGated(value);
        return this;
    }

    @Override
    public Parking withLighting(LightingEnumeration value) {
        setLighting(value);
        return this;
    }

    @Override
    public Parking withAllAreasWheelchairAccessible(Boolean value) {
        setAllAreasWheelchairAccessible(value);
        return this;
    }

    @Override
    public Parking withPersonCapacity(BigInteger value) {
        setPersonCapacity(value);
        return this;
    }

    @Override
    public Parking withFacilities(SiteFacilitySets_RelStructure value) {
        setFacilities(value);
        return this;
    }

    @Override
    public Parking withUrl(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public Parking withImage(String value) {
        setImage(value);
        return this;
    }

    @Override
    public Parking withPostalAddress(PostalAddress value) {
        setPostalAddress(value);
        return this;
    }

    @Override
    public Parking withRoadAddress(RoadAddress value) {
        setRoadAddress(value);
        return this;
    }

    @Override
    public Parking withPlaceTypes(TypeOfPlaceRefs_RelStructure value) {
        setPlaceTypes(value);
        return this;
    }

    @Override
    public Parking withTypes(TypeOfZoneRefs_RelStructure value) {
        setTypes(value);
        return this;
    }

    @Override
    public Parking withCentroid(SimplePoint_VersionStructure value) {
        setCentroid(value);
        return this;
    }

    @Override
    public Parking withPolygon(PolygonType value) {
        setPolygon(value);
        return this;
    }

    @Override
    public Parking withProjections(Projections_RelStructure value) {
        setProjections(value);
        return this;
    }

    @Override
    public Parking withParentZoneRef(ZoneRefStructure value) {
        setParentZoneRef(value);
        return this;
    }

    @Override
    public Parking withMembers(PointRefs_RelStructure value) {
        setMembers(value);
        return this;
    }

    @Override
    public Parking withName(MultilingualString value) {
        setName(value);
        return this;
    }

    @Override
    public Parking withShortName(MultilingualString value) {
        setShortName(value);
        return this;
    }

    @Override
    public Parking withDescription(MultilingualString value) {
        setDescription(value);
        return this;
    }

    @Override
    public Parking withPurposeOfGroupingRef(PurposeOfGroupingRefStructure value) {
        setPurposeOfGroupingRef(value);
        return this;
    }

    @Override
    public Parking withPrivateCode(PrivateCodeStructure value) {
        setPrivateCode(value);
        return this;
    }

    @Override
    public Parking withInfoLinks(org.rutebanken.netex.model.GroupOfEntities_VersionStructure.InfoLinks value) {
        setInfoLinks(value);
        return this;
    }

    @Override
    public Parking withKeyList(KeyListStructure value) {
        setKeyList(value);
        return this;
    }

    @Override
    public Parking withExtensions(ExtensionsStructure value) {
        setExtensions(value);
        return this;
    }

    @Override
    public Parking withBrandingRef(BrandingRefStructure value) {
        setBrandingRef(value);
        return this;
    }

    @Override
    public Parking withResponsibilitySetRef(String value) {
        setResponsibilitySetRef(value);
        return this;
    }

    @Override
    public Parking withValidityConditions(ValidityConditions_RelStructure value) {
        setValidityConditions(value);
        return this;
    }

    @Override
    public Parking withValidBetween(ValidBetween... values) {
        if (values!= null) {
            for (ValidBetween value: values) {
                getValidBetween().add(value);
            }
        }
        return this;
    }

    @Override
    public Parking withValidBetween(Collection<ValidBetween> values) {
        if (values!= null) {
            getValidBetween().addAll(values);
        }
        return this;
    }

    @Override
    public Parking withAlternativeTexts(AlternativeTexts_RelStructure value) {
        setAlternativeTexts(value);
        return this;
    }

    @Override
    public Parking withDataSourceRef(String value) {
        setDataSourceRef(value);
        return this;
    }

    @Override
    public Parking withCreated(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public Parking withChanged(LocalDateTime value) {
        setChanged(value);
        return this;
    }

    @Override
    public Parking withModification(ModificationEnumeration value) {
        setModification(value);
        return this;
    }

    @Override
    public Parking withVersion(String value) {
        setVersion(value);
        return this;
    }

    @Override
    public Parking withStatus_BasicModificationDetailsGroup(StatusEnumeration value) {
        setStatus_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public Parking withDerivedFromVersionRef_BasicModificationDetailsGroup(String value) {
        setDerivedFromVersionRef_BasicModificationDetailsGroup(value);
        return this;
    }

    @Override
    public Parking withCompatibleWithVersionFrameVersionRef(String value) {
        setCompatibleWithVersionFrameVersionRef(value);
        return this;
    }

    @Override
    public Parking withDerivedFromObjectRef(String value) {
        setDerivedFromObjectRef(value);
        return this;
    }

    @Override
    public Parking withNameOfClass(String value) {
        setNameOfClass(value);
        return this;
    }

    @Override
    public Parking withId(String value) {
        setId(value);
        return this;
    }

    /**
     * Generates a String representation of the contents of this type.
     * This is an extension method, produced by the 'ts' xjc plugin
     * 
     */
    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, OmitNullsToStringStyle.INSTANCE);
    }

}
